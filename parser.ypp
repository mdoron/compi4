%{
	#include "attributes.hpp"
	#include "output.hpp"
	#include <iostream>
	#include <ostream>
	#include <sstream>
	#include <stdlib.h>
	#include <string>
	#include <set>
	#include <stack>
	#include <assert.h>
	#include "bp.hpp"
	
	#define STOI(x) atoi(x.c_str())
	#define DEBUG 0
	
	using namespace std;

	extern int yylex();
	extern int yylineno;
	extern string saveyy;
	
	int yyerror(string message);
	void assertType(type_t t1, type_t t2);
	void assertNotType(type_t t1, type_t t2);
	void assertNumber(type_t t);
	void assertOneOfTypes(type_t t, type_t* ts, int len);
	
	void assertDef(string name);
	void assertNotDef(string name);
	bool isDef(string name);
	Row* findDef(string name);
	void insert(list<Row*>* rs, Row* r);
	void printList(list<Row*>* rs);
	Row* findFunction(string name);
	bool isFunction(string name);
	std::vector<const char*> castToStringVector(list<type_t>* l);
	bool compare(list<type_t>* l1, list<type_t>* l2);
	bool isVar(Row* r);
	bool isBool(string name);
	
	int whileCounter = 0;
	type_t functionType = TYPE_NON;
	string functionName = "";
	bool is_main = false;
	int main_counter = 0;
	
	stack<Table*>* tables = new stack<Table*>();
	stack<int>* offsets = new stack<int>();
	Table* bottomTable = NULL;
	
	list<type_t>* formalTypes = new list<type_t>();
	list<string>* formalNames = new list<string>();
	
	stack<list<type_t>* > callsStack;
	list<type_t>* callParams;
	
	const char* typeNames[6] = {"NON", "BOOL", "INT", "BYTE", "STRING", "VOID"};
	
	int stringLabelIdx = 0;
	int divLabelIdx = 0;
	
	// ************************ hw5 ***************************** //
	string getAddu (string Rdest, string Rsrc, string num2);
	string getSubu (string Rdest, string Rsrc, string num2);
	string getMulo (string Rdest, string Rsrc, string num2);
	string getDivu (string Rdest, string Rsrc, string num2);
	string getMove (string Rdest, string Rsrc);
	string getLoadint (string Rdest, string num);
	string emitBinop(string binop, string R1, string R2);
	string getRelop(string op);
	string getIf(string relop, string reg, string val, string label);
	string emitBooleanAssignment(vector<address_t> trueList, vector<address_t> falseList);
	string getSw(string Rsrc, string offset, string Rdest);
	string emitLeaf(string name);
	string getLw(string Rdest, string offset, string Rsrc);
	string loadVar(string name, STYPE* S);
	void storeVar(string name, type_t t, string value);
	void emitPopLocals();
	string popAllVars();
	void handleReturn();
	void emitPrint();
	void emitPrinti();
	void emitPushZero();
	void emitStoreTop(string Rdest, type_t t);
	void emitPush(string Rdest, type_t t);
	bool isBoolFunction(string name);
	int countLocals();
	
	class Registers {
		set<string> releasedRegs;
		set<string> allocatedRegs;
		
		public:

		Registers(){
			int i=0;
			string a="0123456789";
			string t = "$t";
			string s = "$s";
			while(i!=8){
				string tmp = t;
				tmp.append(&a[i],0, 1);
				releasedRegs.insert(tmp);
				tmp = s;
				tmp.append(&a[i], 0, 1);
				releasedRegs.insert(tmp);
				i++;
			}
			string tmp = t;
			tmp.append(&a[i],0, 1);
			releasedRegs.insert(tmp);
			i++;
			tmp = t;
			tmp.append(&a[i],0, 1);
			releasedRegs.insert(tmp);
		}
		
		~Registers(){}

		set<string> getReleasedRegs() {
			return releasedRegs;
		}

		set<string> getAllocatedRegs() {
			return allocatedRegs;
		}		
		
		string allocate(){
			assert(releasedRegs.size()!=0);
			set<string>::iterator it = releasedRegs.begin();
			string reg = *it;
			allocatedRegs.insert(reg);
			cout<< "alloc: "<< reg <<" " <<yylineno <<endl;
			releasedRegs.erase(reg);
			return reg;
		}

		void release(string reg){
			if (reg == "")
				return;
			assert(releasedRegs.find(reg)==releasedRegs.end());
			releasedRegs.insert(reg);
			allocatedRegs.erase(reg);	
			cout<< "release: " << reg <<" "<< yylineno <<endl;
		}
		
		void releaseAll() {
			for(set<string>::iterator it = allocatedRegs.begin(); it != allocatedRegs.end() && !allocatedRegs.empty(); ++it)
				release(*it);
		}

		unsigned long long int numOfValidRegisters(){
			return releasedRegs.size();
		}

	};
	
	
	int labelCounter;
	Registers regsPool;
	CodeBuffer& cb = CodeBuffer::instance();

%}

%token VOID INT BYTE B BOOL AND OR NOT TRUE FALSE RETURN IF ELSE WHILE SWITCH CASE BREAK COLON SC COMMA LPAREN RPAREN LBRACE RBRACE ASSIGN RELOP MULTOP PLUSOP ID NUM STRING

%left AND OR
%right ELSE RPAREN ASSIGN NOT 
%left RELOP 
%left PLUSOP
%left MULTOP

%%

Program : Init Funcs { 
			if ( main_counter == 0 ) {
				output::errorMainMissing();
				exit(0);
			}
			
		//while(stack<Table*>::iterator it = tables->begin();it!=tables->end();it++) {	
		//	}
			
			/*output::endScope();
			list<Row*>::iterator it = (tables->top()->rows)->begin();
			++it;
			++it;
			for(; it!=(tables->top()->rows)->end();it++) {
				string fType = output::makeFunctionType((typeNames[(*it)->type]),castToStringVector((*it)->params));
				output::printID(((*it)->name).c_str(),0,fType.c_str());
			}
			*/
			cb.printCodeBuffer();
			cb.printDataBuffer();
		}
Init : {
	emitPrint();
	emitPrinti();
	ostringstream stringLabel;
	stringLabel << "aErrorZeroDivision";
	cb.emitData(stringLabel.str() + ": .asciiz " + "\"Error division by zero\n\"");
	
	bottomTable = new Table();
	// Add lib functions
	Row* print = new Row(TYPE_VOID, "print", NULL);
	list<type_t>* params = new list<type_t>();
	params->push_back(TYPE_STRING);
	print->setParams(params);
	(bottomTable->rows)->push_back(print);
	Row* printi = new Row(TYPE_VOID, "printi", NULL);
	list<type_t>* params2 = new list<type_t>();
	params2->push_back(TYPE_INT);
	printi->setParams(params2);
	(bottomTable->rows)->push_back(printi);
	
	tables->push(bottomTable);
	offsets->push(0);
}
Funcs :	FuncDecl Funcs {}
		| { if (saveyy != "") yyerror(""); }
FuncDecl : RetType FuncName LPAREN Formals RPAREN LBRACE DoneSignature Slbrace InsertLocals Stmts Srbrace RBRACE {
				if (is_main) {
					if ( main_counter > 0 ) {
						yyerror(""); // TODO: Check if correct
					}
					main_counter++;
					if ( functionType != TYPE_VOID ) {
						output::errorMainMissing(); // TODO: Check if correct
						exit(0);
					}
				}
				cb.emit($2.name + "_end:");
				cb.bpatch($10.nextList, $2.name+"_end");
				if($1.type == TYPE_VOID) { 
					emitPopLocals();
					cb.emit("jr $ra");
				}
				functionType = TYPE_NON;
				functionName = "";
			}
InsertLocals : {
	int i = -1;
	list<string>::iterator itN = formalNames->begin();
	list<type_t>::iterator itT = formalTypes->begin();
	
	for (; itN != formalNames->end(); ++itN, ++itT) {
		Row* r = new Row((*itT), (*itN), &(i));
		insert((tables->top())->rows, r);
		i--;
	}
}	
DoneSignature : {
		Row* r = new Row(functionType, functionName, NULL);
		r->setParams(formalTypes);
		insert((tables->top())->rows, r);
	}

IdBuilt : ID { $$.name = $1.name; }

/*IdBuiltLoad : ID { $$.name = $1.name; }
IdBuiltStore : ID { $$.name = $1.name; }*/

FuncName : IdBuilt {
			regsPool.releaseAll();
			
			$$.name = $1.name;
			functionName = $1.name;
			is_main = ($1.name == "main");
			
			if($$.name == "main")
				cb.emit(".globl main");
			cb.emit($$.name + ":");
			cb.emit(getMove("$fp", "$sp"));
			cb.emit(getSubu("$fp", "$fp", "4"));
		}
Slbrace : {
		Table* t = new Table();
		t->parent = tables->top();
		tables->push(t);
		offsets->push(offsets->top());
	}
Srbrace : {
	/*output::endScope();
	list<Row*>::iterator ir = ((tables->top()->rows)->begin());
	for(; ir!=(tables->top()->rows)->end();ir++)
		output::printID(((*ir)->name).c_str(),*((*ir)->offset),(typeNames[(*ir)->type]));
	*/
	tables->pop();
	offsets->pop();
	
	saveyy = "";
	
	if(is_main) {
		if( formalTypes->size()>0 && (*(formalTypes->begin())) != TYPE_VOID ) {
			output::errorMainMissing();
			exit(0);
		}
	}
	
	formalTypes->clear();
	formalNames->clear();
}
RetType : Type { $$.type = $1.type; functionType = $$.type; }
		| VOID { $$.type = TYPE_VOID; functionType = $$.type; }
Formals : FormalsList {  }
		| { formalTypes->push_back(TYPE_VOID); }
FormalsList : FormalDecl {}
  			| FormalDecl COMMA FormalsList {}
FormalDecl : Type IdBuilt {
				$$.type = $1.type;
				$$.name = $2.name;
				formalTypes->push_back($1.type);
				formalNames->push_back($2.name);
			}
Stmts : Stmt {
				$$.nextList = $1.nextList; 
				$$.breakList = $1.breakList; 
			}
  	  | Stmts M Stmt { 
		  cb.bpatch($1.nextList, $2.quad);
		  $$.nextList = $3.nextList;
		  $$.breakList = cb.merge($1.breakList, $3.breakList); 
		}

Stmt : SingleStmt {
		 $$.nextList = $1.nextList; 
		 $$.breakList = $1.breakList; 
		} 
	 | BlockStmt {
		 $$.nextList = $1.nextList; 
		 $$.breakList = $1.breakList; 
		}

BlockStmt : LBRACE Slbrace Stmts Srbrace RBRACE {
	$$.nextList = $3.nextList;
	$$.breakList = $3.breakList; 
}
	  
VarDefStmt : Type IdBuilt SC {
			Row* r = new Row($1.type, $2.name, &(offsets->top()));
			Table* top = tables->top();
			list<Row*>* rs = top->rows;
			insert(rs, r);
			offsets->pop();
			offsets->push(*(r->offset) + 1);
			
			emitPushZero();
			
			//$$.nextList = NULL;
		}
		| Type IdBuilt ASSIGN Exp SC {
			assertNotDef($2.name);
			if ($1.type == TYPE_INT) {
				type_t ts[2] = {TYPE_INT, TYPE_BYTE};
				assertOneOfTypes($4.type, ts, 2);
			} else {
				assertType($1.type, $4.type);
			}
			string Rdest = ""; 
			if($1.type == TYPE_BOOL)
				Rdest = emitBooleanAssignment($4.trueList, $4.falseList);
			else
				Rdest = $4.place;
				
			emitPush(Rdest, $1.type);
			regsPool.release(Rdest);
			
			Row* r = new Row($1.type, $2.name, &(offsets->top()));
			Table* top = tables->top();
			list<Row*>* rs = top->rows;
			insert(rs, r);
			offsets->pop();
			offsets->push(*(r->offset) + 1); 
			
			//$$.nextList = NULL;
		}
		
SingleVarDefStmtOfControlFlow : Slbrace VarDefStmt Srbrace {
								  $$.nextList = $2.nextList;
							  }

SingleStmtOfControlFlow : SingleVarDefStmtOfControlFlow {$$.nextList = $1.nextList;} 
						| ControlFlowStmt {
							$$.nextList = $1.nextList; 
							$$.breakList = $1.breakList; 
						}

StmtOfControlFlow : SingleStmtOfControlFlow {
						$$.nextList = $1.nextList; 
						$$.breakList = $1.breakList; 
				  } 
				  | BlockStmt {
					  $$.nextList = $1.nextList; 
					  $$.breakList = $1.breakList;
					}

SingleStmt : VarDefStmt {
				$$.nextList = $1.nextList;
			} 
		   | ControlFlowStmt {
				$$.nextList = $1.nextList; 
				$$.breakList = $1.breakList; 
		   }

ControlFlowStmt : IdBuilt ASSIGN Exp SC {
			assertDef($1.name);
			Row* def = findDef($1.name);
			if (!isVar(def)) {
				output::errorUndef(yylineno, ($1.name).c_str());
				exit(0);
			}
			if (def->type == TYPE_INT) {
				type_t ts[2] = {TYPE_INT, TYPE_BYTE};
				assertOneOfTypes($3.type, ts, 2);
			} else {
				assertType(def->type, $3.type);
			}

			string Rdest = ""; 
			if(isBool($1.name))
				Rdest = emitBooleanAssignment($3.trueList, $3.falseList);
			else
				Rdest = $3.place;
			
			storeVar($1.name, $3.type, Rdest);
			//cb.emit(getSubu("$sp", "$sp", "4"));
			//cb.emit(getSw(Rdest, "0", "$sp"));
			regsPool.release(Rdest);
			
			//$$.nextList = NULL;
		}
     | Call SC {
		 if ($1.type == TYPE_BOOL)
			$$.nextList = cb.merge($1.trueList, $1.falseList);
	 }
     | RETURN SC { 
			assertType(functionType, TYPE_VOID); 
			emitPopLocals();
			cb.emit("jr $ra");
		}
     | RETURN Exp SC { 
			assertNotType(functionType, TYPE_VOID); 
			if (functionType == TYPE_INT)
				assertNumber($2.type);
			else 
				assertType(functionType, $2.type);
			if($2.type != TYPE_BOOL)
				cb.emit(getMove("$v0", $2.place));
			else {
				string ret1 = cb.next();
				cb.emit("li $v0, 1");
				vector<address_t> jumpToExit = cb.makelist(cb.emit("j "));
				string ret0 = cb.next();
				cb.emit("li $v0, 0");
				cb.bpatch($2.trueList, ret1);
				cb.bpatch($2.falseList, ret0);
				cb.bpatch(jumpToExit, cb.next());
			}
			emitPopLocals();
			cb.emit("jr $ra");
		}
     | IfStmt M RPAREN StmtOfControlFlow {
		cb.bpatch($1.trueList, $2.quad);
		$$.nextList = cb.merge($1.falseList, $4.nextList);
		$$.breakList = $4.breakList; 
	 }
	 | IfStmt M RPAREN StmtOfControlFlow ELSE N M StmtOfControlFlow { 
		cb.bpatch($1.trueList,$2.quad);
		cb.bpatch($1.falseList,$7.quad);
		$$.nextList = cb.merge(cb.merge($4.nextList, $6.nextList), $8.nextList);
		$$.breakList = cb.merge($4.breakList, $8.breakList); 
	 }
	 | M WhileStmt RPAREN M Wlparen StmtOfControlFlow Wrparen {
		cb.bpatch($6.nextList, $1.quad);
		cb.bpatch($2.trueList, $4.quad);
		//$$.nextList = cb.merge($6.breakList, $2.falseList);
		cb.emit("j " + $1.quad);
		$$.nextList = $2.falseList;
		cb.bpatch($6.breakList, cb.next());
	 }
     | BREAK SC {
			if(whileCounter == 0) {
				output::errorUnexpectedBreak(yylineno);
				exit(0);
			}
			$$.breakList = cb.makelist(cb.emit("j "));
		}
	 | SwitchStmt N RPAREN LBRACE CaseList RBRACE SC {
			cb.bpatch($2.nextList, cb.next());
			
			while(!$5.valueList.empty()){
				int value = $5.valueList.top();
				$5.valueList.pop();
				string quad = $5.quadList.top();
				$5.quadList.pop();
				ostringstream temp;
				temp << value;
				cb.emit("beq " + $1.place + ", " + temp.str() + ", " + quad);
			}
			cb.next();
			$$.nextList = cb.merge($5.nextList, cb.makelist(cb.emit("j ")));
			$$.breakList = $5.breakList;

	 }
SwitchStmt : SWITCH LPAREN Exp {
			assertNumber($3.type);
			$$.place = $3.place;
			$$.trueList = $3.trueList;
			$$.falseList = $3.falseList;
}
IfStmt : IF LPAREN Exp  {
			assertType($3.type, TYPE_BOOL);
			$$.trueList = $3.trueList;
			$$.falseList = $3.falseList;
		}
WhileStmt : WHILE LPAREN Exp { 
			assertType($3.type, TYPE_BOOL); 
			$$.trueList = $3.trueList;
			$$.falseList = $3.falseList;
		}
Wlparen : {whileCounter += 1;}
Wrparen : {whileCounter -= 1;}
CaseList : CaseStat CaseList {
			$$.quadList = $2.quadList;
			$$.quadList.push($1.quad);
			$$.valueList = $2.valueList;
			$$.valueList.push($1.value);
			$$.nextList = cb.merge($2.nextList,$1.nextList);
			$$.breakList = cb.merge($1.breakList, $2.breakList);
}
		 | CaseStat {
			 $$.quadList.push($1.quad);
			 $$.valueList.push($1.value);
			 $$.nextList = $1.nextList; 
			 $$.breakList = $1.breakList;
		 }
CaseStat : CASE NUM COLON M StmtOfControlFlow BREAK SC {
			$$.quad = $4.quad;
			$$.value = atoi(($2.name).c_str());
			$$.nextList = cb.merge($5.nextList, cb.makelist(cb.emit("j "))) ;
			$$.breakList = $5.breakList;
		}
		 | CASE NUM B COLON M StmtOfControlFlow BREAK SC {
			$$.quad = $5.quad;
			$$.value = atoi(($2.name).c_str());
			$$.nextList = cb.merge($6.nextList, cb.makelist(cb.emit("j "))) ;
			$$.breakList = $6.breakList;
		 }
Call : IdBuilt LPAREN NewCall ExpList RPAREN {
		Row* r = findFunction($1.name);
		if (r == NULL) {
			output::errorUndefFunc(yylineno, ($1.name).c_str());
			exit(0);
		}
		
		$$.type = r->type;
		$$.name = r->name;
			
		list<type_t>::iterator it = callParams->begin();
		
		if (!compare(callParams, r->params)) {
			output::errorPrototypeMismatch(yylineno, ($1.name).c_str(), castToStringVector(r->params));
			exit(0);
		}
		callParams->clear();		
		callsStack.pop();
		callParams = callsStack.size() > 0 ? callsStack.top() : NULL;
		
		// push allocated registers
		for( list<string>::iterator it = $3.allocatedRegsList.begin(); it != $3.allocatedRegsList.end(); ++it ) {
			emitPush(*it, TYPE_INT);
		}
		// push ra
		emitPush("$ra", TYPE_INT);
		emitPush("$fp", TYPE_INT);
		
		// push params backwards
		for( list<string>::reverse_iterator rit = $4.paramPlaceList.rbegin(); rit != $4.paramPlaceList.rend(); ++rit ) {
			emitPush(*rit, TYPE_INT);
		}
		// call
		cb.emit("jal " + $1.name);
		// get value
		string Rdest = "";
		if (findFunction($1.name)->type != TYPE_VOID) {
			Rdest = regsPool.allocate();
			cb.emit(getMove(Rdest, "$v0"));
			$$.place = Rdest;
		}
		// pop params
		int paramSize = 4*(($4.paramPlaceList).size());
		ostringstream paramSizeText;
		paramSizeText << paramSize;
		//for( list<string>::iterator it = $4.paramPlaceList.begin(); it != $4.paramPlaceList.end(); ++it ) {
		//cb.emit(getLw(*it, "0", "$sp"));
		cb.emit(getAddu("$sp", "$sp", paramSizeText.str()));
		//}
		
		// pop ra
		cb.emit(getLw("$fp", "0", "$sp"));
		cb.emit(getAddu("$sp", "$sp", "4"));
		cb.emit(getLw("$ra", "0", "$sp"));
		cb.emit(getAddu("$sp", "$sp", "4"));		
		
		// pop allocated registers
		for( list<string>::reverse_iterator rit = $3.allocatedRegsList.rbegin(); rit != $3.allocatedRegsList.rend(); ++rit ) {
			cb.emit(getLw(*rit, "0", "$sp"));
			cb.emit(getAddu("$sp", "$sp", "4"));
		}
		
		// release ExpList registers
		for( list<string>::iterator it = $4.paramPlaceList.begin(); it != $4.paramPlaceList.end(); ++it ) {
			regsPool.release(*it);
		}
		
		if (isBoolFunction($$.name) && Rdest != "") {
			$$.trueList = cb.makelist(cb.emit(getIf("beq", Rdest, "1", "")));
			$$.falseList = cb.makelist(cb.emit(getIf("beq", Rdest, "0", "")));
			regsPool.release(Rdest);
		}
		
	 }
	 | IdBuilt LPAREN NewCall RPAREN {
		Row* r = findFunction($1.name);
		if (r == NULL) {
			output::errorUndefFunc(yylineno, ($1.name).c_str());
			exit(0);
		}
		$$.type = r->type;
		$$.name = $1.name;
		callParams->push_back(TYPE_VOID);
		if (!compare(callParams, r->params)) {
			output::errorPrototypeMismatch(yylineno, ($1.name).c_str(), castToStringVector(r->params));
			exit(0);
		}
		
		callParams->clear();
		callsStack.pop();
		callParams = callsStack.size() > 0 ? callsStack.top(): new list<type_t>();
		
		// push allocated registers
		for( list<string>::iterator it = $3.allocatedRegsList.begin(); it != $3.allocatedRegsList.end(); ++it ) {
			emitPush(*it, TYPE_INT);
		}
		// push ra
		emitPush("$ra", TYPE_INT);
		emitPush("$fp", TYPE_INT);
		// call
		cb.emit("jal " + $1.name);
		// get value
		string Rdest = "";
		if (findFunction($1.name)->type != TYPE_VOID) {
			Rdest = regsPool.allocate();
			cb.emit(getMove(Rdest, "$v0"));
			$$.place = Rdest;
		}

		// pop ra
		cb.emit(getLw("$fp", "0", "$sp"));
		cb.emit(getAddu("$sp", "$sp", "4"));
		cb.emit(getLw("$ra", "0", "$sp"));
		cb.emit(getAddu("$sp", "$sp", "4"));		
		
		// pop allocated registers
		for( list<string>::reverse_iterator rit = $3.allocatedRegsList.rbegin(); rit != $3.allocatedRegsList.rend(); ++rit ) {
			cb.emit(getLw(*rit, "0", "$sp"));
			cb.emit(getAddu("$sp", "$sp", "4"));
		}
		if (isBoolFunction($$.name) && Rdest != "") {
			$$.trueList = cb.makelist(cb.emit(getIf("beq", Rdest, "1", "")));
			$$.falseList = cb.makelist(cb.emit(getIf("beq", Rdest, "0", "")));
			regsPool.release(Rdest);
		}	
	 }
NewCall : {
	callParams = new list<type_t>();
	callsStack.push(callParams);
	set<string> temp = regsPool.getAllocatedRegs();
	for( set<string>::iterator it = temp.begin(); it != temp.end(); ++it ) {
		$$.allocatedRegsList.push_back(*it);
	}
}
ExpList : Exp {
			callParams->push_front($1.type);
			
			if ($1.type == TYPE_BOOL) 
				$1.place = emitBooleanAssignment($1.trueList, $1.falseList);
			
			$$.paramPlaceList.push_front($1.place);
			
		}
		| Exp COMMA ExpList {
			callParams->push_front($1.type);
			$$.paramPlaceList = $3.paramPlaceList;			
			if ($1.type == TYPE_BOOL) 
				$1.place = emitBooleanAssignment($1.trueList, $1.falseList);
			$$.paramPlaceList.push_front($1.place);

		}
Type : INT {$$.type = TYPE_INT;}
	 | BYTE {$$.type = TYPE_BYTE;}
	 | BOOL {$$.type = TYPE_BOOL;}
Exp : LPAREN Exp RPAREN {
			$$ = $2;
			$$.falseList = $2.falseList;
			$$.trueList = $2.trueList;
			
			$$.place = $2.place;
		}
	| Exp PLUSOP Exp {
			assertNumber($1.type);
			assertNumber($3.type);
			$$.type = ($1.type == TYPE_INT || $3.type == TYPE_INT) ? TYPE_INT : TYPE_BYTE;
			$$.place = emitBinop($2.name, $1.place, $3.place);
			//regsPool.release($1.place);
			regsPool.release($3.place);
		}
	| Exp MULTOP Exp {
			assertNumber($1.type);
			assertNumber($3.type);
			$$.type = ($1.type == TYPE_INT || $3.type == TYPE_INT) ? TYPE_INT : TYPE_BYTE;
			$$.place = emitBinop($2.name, $1.place, $3.place);
			//regsPool.release($1.place);
			regsPool.release($3.place);
		}
	| IdBuilt { 
		assertDef($1.name); 
		Row* r = findDef($1.name);
		$$.type = r->type;
		$$.name = $1.name;
		
		string Rdest = regsPool.allocate();
		ostringstream offset;
		offset << 4*(-*(r->offset));
		cb.emit(getLw(Rdest, offset.str(), "$fp"));
		if (isBool($$.name)) {
			$$.trueList = cb.makelist(cb.emit(getIf("beq", Rdest, "1", "")));
			$$.falseList = cb.makelist(cb.emit(getIf("beq", Rdest, "0", "")));
			regsPool.release(Rdest);
		}	
		// TODO: Check this out - why it's not in if !isBool($$.name) ? 
		$$.place = Rdest;
	}
	| Call {}
	| NUM {
		$$.place = emitLeaf($1.name);
	}
	| NumByte {
		$$.place = emitLeaf($1.name);
	}
	| STRING {
		$$.type = TYPE_STRING;
		ostringstream stringLabel;
		stringLabel << "aString" << stringLabelIdx;
		cb.emitData(stringLabel.str() + ": .asciiz " +  $1.name );
		stringLabelIdx++;
		string Rdest = regsPool.allocate();
		cb.emit("la " + Rdest + ", " + stringLabel.str());
		$$.place = Rdest;
	}
	| TRUE {
			$$.name = "1"; 
			$$.type = TYPE_BOOL;
			$$.trueList = cb.makelist(cb.emit("j "));
		}
	| FALSE {
			$$.name = "0"; 
			$$.type = TYPE_BOOL;
			$$.falseList = cb.makelist(cb.emit("j "));
		}
	| NOT Exp {
			assertType($2.type, TYPE_BOOL);
			$$.type = TYPE_BOOL;
			
			$$.place = $2.place;
			$$.falseList = $2.trueList;
			$$.trueList = $2.falseList;
		}
	| Exp AND M Exp {
			assertType($1.type, TYPE_BOOL);
			assertType($4.type, TYPE_BOOL);
			$$.type = TYPE_BOOL;
			
			cb.bpatch($1.trueList, $3.quad);
			$$.trueList = $4.trueList;
			$$.falseList = cb.merge($1.falseList,$4.falseList);
			
			
		}
	| Exp OR M Exp {
			assertType($1.type, TYPE_BOOL);
			assertType($4.type, TYPE_BOOL);
			$$.type = TYPE_BOOL;
			
			cb.bpatch($1.falseList, $3.quad);
			$$.trueList = cb.merge($1.trueList,$4.trueList);
			$$.falseList = $4.falseList;			
		}
	| Exp RELOP Exp {
			assertNumber($1.type);
			assertNumber($3.type);
			$$.type = TYPE_BOOL;
			
			$$.trueList = cb.makelist(cb.emit(getIf(getRelop($2.name), $1.place, $3.place, "")));
			$$.falseList = cb.makelist(cb.emit("j "));
			regsPool.release($1.place);
			regsPool.release($3.place);
		}
M : {
	$$.quad = cb.next();
}
N : {
	cb.next();
	$$.nextList = cb.makelist(cb.emit("j "));
}
NumByte : NUM B { 
			int val = atoi(($1.name).c_str());
			if (val < 0 || val > 255) {
				char ret = val;
				output::errorByteTooLarge(yylineno, ($1.name).c_str());
				exit(0);
			}
			$$.type = TYPE_BYTE;
			$$.name = $1.name;
		}
%%

int main()
{
	yyparse();
}

int yyerror(string message)
{
	output::errorSyn(yylineno);
	exit(0);
}


/***********************HW5***************************/

string getAddu (string Rdest, string Rsrc, string num2){
    return "addu " + Rdest + ", " + Rsrc + ", " + num2;
}

string getSubu (string Rdest, string Rsrc, string num2){
    return "subu " + Rdest + ", " + Rsrc + ", " + num2;
}

string getMulo (string Rdest, string Rsrc, string num2){
    return "mulo " + Rdest + ", " + Rsrc + ", " + num2;
}

string getDivu (string Rdest, string Rsrc, string src2){
    return "divu " + Rdest + ", " + Rsrc + ", " + src2;
}

string getMove (string Rdest, string Rsrc){
    return "move " + Rdest + ", " + Rsrc;
}

string getLoadint (string Rdest, string num) {
	return "li " + Rdest + ", " + num;
}

string getSw(string Rsrc, string offset, string Rdest) {
	return "sw " + Rsrc + ", " + offset + "(" + Rdest + ")";
}

string getSb(string Rsrc, string offset, string Rdest) {
	return "sb " + Rsrc + ", " + offset + "(" + Rdest + ")";
}

string getLw(string Rdest, string offset, string Rsrc) {
	return "lw " + Rdest + ", " + offset + "(" + Rsrc + ")";
}

string emitBinop(string binop, string R1, string R2) {
	string command = "";
	switch(binop[0]) {
		case '+': command += getAddu(R1, R1, R2); break;
		case '-': command += getSubu(R1, R1, R2); break;
		case '*': command += getMulo(R1, R1, R2); break;
		case '/': command += getDivu(R1, R1, R2);
				  // push ra
				  ostringstream divOk;
				  divOk << "divOk" << divLabelIdx;
				  cb.emit(getIf("bne", R2, "0", divOk.str()));
				  emitPush("$ra", TYPE_INT);
				  emitPush("$fp", TYPE_INT);
				  string Rdest = regsPool.allocate();
				  cb.emit("la " + Rdest + ", aErrorZeroDivision");
				  emitPush(Rdest, TYPE_INT);
				  regsPool.release(Rdest);
				  cb.emit("jal print");
				  cb.emit("li $v0, 10");
				  cb.emit("syscall");
				  // pop ra
				  cb.emit(getLw("$fp", "0", "$sp"));
				  cb.emit(getAddu("$sp", "$sp", "4"));
    			  cb.emit(getLw("$ra", "0", "$sp"));
				  cb.emit(getAddu("$sp", "$sp", "4"));
				  
				  cb.emit(divOk.str()+":");
				  divLabelIdx++;
				  break;
	}
	cb.emit(command);
	return R1;
}

string emitBooleanAssignment(vector<address_t> trueList, vector<address_t> falseList) {
	string trueLabel = cb.next();
	string Rdest = regsPool.allocate();
	cb.emit(getLoadint(Rdest, "1"));
	vector<address_t> saveToStackList = cb.makelist(cb.emit("j "));
	cb.bpatch(trueList, trueLabel);
	string falseLabel = cb.next();
	cb.emit(getLoadint(Rdest, "0"));
	cb.bpatch(falseList, falseLabel);
	string saveToStackLabel = cb.next();
	cb.bpatch(saveToStackList, saveToStackLabel);
	return Rdest;
}

void emitPushZero() {
	cb.emit(getSubu("$sp", "$sp", "4"));
	cb.emit(getSw("$0", "0", "$sp"));
}

void emitStoreTop(string Rdest, type_t t) {
	if (t != TYPE_BYTE){
			cb.emit(getSw(Rdest, "0", "$sp"));
		}
	else{
			cb.emit(getSb(Rdest, "0", "$sp"));
		}
}

void emitPush(string Rdest, type_t t){ 
	emitPushZero();
	emitStoreTop(Rdest, t);
}

string getIf(string relop, string reg, string val, string label) {
	return relop + " " + reg + ", " + val + ", " + label;
}

string getRelop(string op) {
	if (op == "<")
		return "blt";
	if (op == "<=")
		return "ble";
	if (op == "==")
		return "beq";
	if (op == ">=")
		return "bge";
	if (op == ">")
		return "bgt";
	if (op == "!=")
		return "bne";
	return "";
}

string emitLeaf(string name) {
	string Rdest = regsPool.allocate();
	cb.emit(getLoadint(Rdest, name));
	return Rdest;
}

string loadVar(string name, STYPE* S) {
	Row* r = findDef(name);
	string Rdest = regsPool.allocate();
	ostringstream offset;
	offset << 4*(-*(r->offset));
	cb.emit(getLw(Rdest, offset.str(), "$fp"));
	if (isBool(name)) {
		S->trueList = cb.makelist(cb.emit(getIf("beq", Rdest, "1", "")));
		S->falseList = cb.makelist(cb.emit(getIf("beq", Rdest, "0", "")));
		regsPool.release(Rdest);
	}
	return Rdest;
}

void storeVar(string name, type_t t, string value) {
	Row* r = findDef(name);
	ostringstream offset;
	offset << 4*(-*(r->offset));
	if (t == TYPE_BYTE) {
		//cb.emit("nop"); 
		cb.emit(getSw("$0",offset.str(),"$fp"));
		cb.emit(getSb(value, offset.str(), "$fp"));
	} else {
			cb.emit(getSw(value, offset.str(), "$fp"));
		}
}

void emitPopLocals()  {
	// not enough: block inside block. 
	//ostringstream tmp;
	//tmp << 4*(tables->top()->rows->size());
	cb.emit(getMove("$sp", "$fp"));
	cb.emit(getAddu("$sp", "$sp", "4"));
	//return ;//getAddu("$sp", "$sp", tmp.str());
}

void emitPrint() {
	cb.emit("print:");
	cb.emit("lw $a0, 0($sp)");
	cb.emit("li $v0, 4");
	cb.emit("syscall");
	cb.emit("jr $ra");
}

void emitPrinti() {
	cb.emit("printi:");
	cb.emit("lw $a0, 0($sp)");
	cb.emit("li $v0, 1");
	cb.emit("syscall");
	cb.emit("jr $ra");
}


string popAllVars()  {
	// not enough: block inside block. 
	ostringstream tmp;
	tmp << countLocals(); //4*(tables->top()->rows->size());
	return getAddu("$sp", "$sp", tmp.str());
}


int countLocals() {
	Table* p = tables->top();
	int count = 0;
	while(p != bottomTable) {
		count += p->rows->size();
		p = p->parent;
	}
	return 4*count;
}
/* ********************************************************* */

void assertType(type_t t1, type_t t2) {
	if(t1 != t2) {
		output::errorMismatch(yylineno);
		exit(0);
	}
	return;
}

void assertNotType(type_t t1, type_t t2) {
	if(t1 == t2) {
		output::errorMismatch(yylineno);
		exit(0);
	}
	return;
}

void assertNumber(type_t t) {
	assertNotType(t, TYPE_STRING);
	assertNotType(t, TYPE_BOOL);
}

void assertOneOfTypes(type_t t, type_t* ts, int len) {
	for (int i=0; i<len; i++)
		if (t == ts[i])
			return;
		
	output::errorMismatch(yylineno);
	exit(0);
}

Row* findDef(string name) {
	Table* it = tables->top();
	if (it == NULL) {
		return NULL;
	}
	for (; it != NULL; it = it->parent)	
		for (list<Row*>::iterator ir = (it->rows)->begin(); ir != (it->rows)->end(); ++ir) {
			if ( (*ir)->name == name ) {
				return (*ir);
			}
		}
	return NULL;
}

Row* findFunction(string name) {
	for (list<Row*>::iterator ir = (bottomTable->rows)->begin(); ir != (bottomTable->rows)->end(); ++ir) {
		if ( (*ir)->name == name ) {
			return (*ir);
		}
	}
	return NULL;
}

bool isFunction(string name) {
	Row* r = findFunction(name);
	return r != NULL;
}

bool isDef(string name) {
	Row* r = findDef(name);
	return r != NULL;
}


bool isBool(string name) {
	Row* r = findDef(name);
	return isVar(r) && (r->type == TYPE_BOOL);
}

bool isBoolFunction(string name) {
	Row* r = findFunction(name);
	return (r->type == TYPE_BOOL);
}

void assertNotDef(string name) {
	if (isDef(name)) {
		output::errorDef(yylineno, name.c_str());
		exit(0);
	}
}

void assertDef(string name) {
	if (!isDef(name)) {
		output::errorUndef(yylineno, name.c_str());
		exit(0);
	}
}

bool isVar(Row* r) {
	return (r->offset != NULL); 
}

void printList(list<Row*>* rs) {
	if (rs == NULL)
		return;
	cout << "Rows: " << endl;
	for (list<Row*>::iterator it=rs->begin(); it!=rs->end(); ++it) {
		//if (it == NULL)
			//continue;
		//std::cout << ' ' << (*it)->name;
	}
	cout << "\nEnd" << endl;
}

void insert(list<Row*>* rs, Row* r) {
	assertNotDef(r->name);
	rs->push_back(r);
}

bool compare(list<type_t>* l1, list<type_t>* l2) {
	if (l1 == NULL || l2 == NULL) {
		return false;
	}
		
	if(l1->size() != l2->size()){
		return false;
	}
	
	list<type_t>::iterator itLeft = l1->begin();
	list<type_t>::iterator itRight = l2->begin();

	for (; itLeft != l1->end(); ++itLeft, ++itRight) {
		
		if(*itRight == TYPE_INT){
			if ( !(*itLeft == TYPE_INT || *itLeft == TYPE_BYTE) ) 
				return false;
		} else if (*itLeft != *itRight) {
			return false;
		}
	}	
	return true;
}

std::vector<const char*> castToStringVector(list<type_t>* l) {
	std::vector<const char*> vec(l->size());
	if(*(l->begin()) == TYPE_VOID)
		return std::vector<const char*>();
	
	int i=0;
	for (list<type_t>::iterator it = l->begin(); it != l->end(); ++it, ++i) {
		vec[i] = typeNames[*it];
	}
	
	return vec;
}